
В архиве должны быть только исполняемые файлы *.py и *.txt, *.json, не нужно включать в архив файлы и папки, которые генерирует сама IDE (.idea, venv и прочие).
Имена файлов должны соответствовать нумерации: если вся задача умещается в один файл, то это будет task_3.py, если файлов несколько, то нужно положить их в папку task_3
Ресурс: https://demoqa.com
Задания со * не являются обязательными.

Сами задания:
1) В разделе /upload-download загрузить файл с локальной системы и проверить, что файл загружается на сайт (появляется путь до файла). Имя должно совпадать.

2) В разделе /dynamic-properties нажать на кнопки "Enable After" и "Visible After 5 Seconds". 
*Реализовать свой метод, который будет опрашивать систему, ожидая появление элемента. 
def waiting_for_element(element_id, timeout): # element_id - id элемента, timeout - время после которого поиски прекращаются

3) В разделе /webtables нужно добавить пользователя по кнопке Add, проверить что пользователь добавлен. 

Имя может состоять только из латинских букв.
Возраст не должен быть меньше 18 лет. 
Зарплата должна быть в диапазоне от 2000 до 20000. 
Существует всего 4 департамента: Insurance, Compliance, Legal, Marketing

*Реализовать отдельный метод по добавлению пользователя.  
Переключиться на выдачу по 5 элементов на страницу.  
Заполнить таблицу 10 новыми пользователями со случайно генерируемыми именами. Можно использовать словарь имен. 
Проверить что изменилось число страниц для выдачи.
По кнопке Next переходим на следующую страницу с записями. 
Проверить переход через поле для ввода в разделе -pageInfo

4) В разделе /webtables нужно отредактировать пользователя 

5) В разделе /webtables нужно проверить поиск по таблице

5) В разделе /webtables нужно проверить удаление пользователя

6) В разделе /browser-windows проверить открытие новой вкладки (New Tab). Если вкладку закрыть, то мы должны вернуться на прошлую вкладку и проверить ее заголовок. 
Вывести список активных кнопок (3 шт).
